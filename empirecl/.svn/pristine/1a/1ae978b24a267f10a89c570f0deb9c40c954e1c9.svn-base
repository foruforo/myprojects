/*
 * this controller is used for handle 
 * a request for Public user 
 */

package com.netsol.controllers;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.dao.SaltSource;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.netsol.controllers.model.ValidateResponse;
import com.netsol.controllers.utility.CommonWebUtils;
import com.netsol.entities.User;
import com.netsol.service.UserRoleService;
import com.netsol.service.UserService;
import com.netsol.utility.CommonUtils;
import com.netsol.utility.EmailGenerator;
import com.netsol.utility.Sender;

@Controller
@RequestMapping("/")
public class UserController extends BaseController<User> {

	@Autowired
	private UserService userService;
	@Autowired
	private UserRoleService userRoleService;
	@Autowired
	private Sender sender;
	@Autowired
	private PasswordEncoder passwordEncoder;
	@Autowired
	private SaltSource saltSource;

	static final Logger logger = Logger.getLogger(UserController.class);

	@RequestMapping("/login")
	public String userLogin(HttpServletRequest request, Model model) {
		logger.debug("calling login page");

		model.addAttribute("title", "User Login");
		return "user-login";
	}

	@RequestMapping("signup")
	public String signup(HttpServletRequest request, Model model) {
		logger.debug("calling signup page");

		model.addAttribute("user", new User());
		model.addAttribute("title", "Sign Up");
		return "user-signup";
	}

	@RequestMapping(value = "signupSubmit", method = RequestMethod.POST)
	public String signupSubmit(HttpServletRequest request, Model model,
			@ModelAttribute @Valid User user, BindingResult result) {
		logger.debug("calling signup page");
		if(result.hasErrors()){
			return "user-signup";
		}
		
		user.setEnabled("1");
		user.setUserRole(userRoleService.getUserDefaultRole());
		String password = user.getPassword();
		user.setPassword(passwordEncoder.encode(password));

		try {
			userService.saveUser(user);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			if (e.getClass().getName()
					.contains("DataIntegrityViolationException")) {
				model.addAttribute("message", "User already Exist.");
			} else {
				model.addAttribute("message", "Please check Detials.");
			}
			return "public-signup";
		}

		Map<String, String> paramMap = new HashMap<String, String>();
		paramMap.put("BASEPATH", CommonWebUtils.getBasePath(request));
		paramMap.put("USERNAME", user.getUsername());
		paramMap.put("PASSWORD", password);
		paramMap.put("FIRSTNAME", user.getFirstName());
		paramMap.put("LASTNAME", user.getLastName());

		EmailGenerator emailGenerator = new EmailGenerator();
		emailGenerator.setToEmail(user.getUsername());
		emailGenerator.setSubject("Demo - Account creation");
		emailGenerator.setTemplateName(CommonUtils.getRealPath()
				+ "emailTemplate/" + "ACTIVATEACCOUNT");
		emailGenerator.setParam(paramMap);

		this.sender.sendMail(emailGenerator);

		model.addAttribute("title", "Sign Up Conformation");
		return "user-signUpConformation";
	}

	@RequestMapping("forgotPassword")
	public String forgotPassword(HttpServletRequest request, Model model) {
		logger.debug("calling forgot password page");

		model.addAttribute("title", "Welcome Admin");
		return "user-forgotPassword";
	}

	@RequestMapping("sendPassword")
	public String sendPassword(HttpServletRequest request, Model model) {
		logger.debug("calling forgot password page");
		if (request.getParameter("username") != null) {
			User user = userService.findUserByName(request
					.getParameter("username"));
			if (user == null) {
				model.addAttribute("message", "Invalid Username");
				model.addAttribute("title", "Welcome User");
				return "public-forgotPassword";
			} else {
				String password = CommonUtils.getAlphaNumeric(15);
				user.setPassword(passwordEncoder.encode(password));
				userService.updateUser(user);

				Map<String, String> paramMap = new HashMap<String, String>();
				paramMap.put("BASEPATH", CommonWebUtils.getBasePath(request));
				paramMap.put("USERNAME", user.getUsername());
				paramMap.put("PASSWORD", password);
				paramMap.put(
						"URL",
						CommonWebUtils.getBasePath(request)
								+ "requesttochangePassword?username="
								+ user.getUsername());

				EmailGenerator emailGenerator = new EmailGenerator();
				emailGenerator.setFromEmail("admin@demo.com");
				emailGenerator.setToEmail(user.getUsername());
				emailGenerator.setSubject("Demo - Recover password");
				emailGenerator.setTemplateName(CommonUtils.getRealPath()
						+ "emailTemplate/" + "FORGOTPASSWORD");
				emailGenerator.setParam(paramMap);
				this.sender.sendMail(emailGenerator);
			}
		}
		model.addAttribute("title", "Send Password");
		return "user-sendPassword";
	}

	@RequestMapping("requesttochangePassword")
	public String requestToChangePassword(HttpServletRequest request,
			Model model) {
		logger.debug("calling change password page");
		model.addAttribute("username", request.getParameter("username"));
		model.addAttribute("title", "Change Password");
		return "user-changePassword";
	}

	@RequestMapping("changePassword")
	public String changePassword(HttpServletRequest request, Model model) {
		logger.debug("calling change password page");
		String username = request.getParameter("username");
		String oldpasswprd = passwordEncoder.encode(request
				.getParameter("opassword"));

		User user = userService.findUserByName(username);
		if (!oldpasswprd.equals(user.getPassword())) {

			model.addAttribute("error", "Old password dosn't match.");
			model.addAttribute("username", username);
			model.addAttribute("title", "Change Password");
			return "public-changePassword";
		}
		String newpasswprd = passwordEncoder.encode(request
				.getParameter("npassword"));
		user.setPassword(newpasswprd);
		userService.updateUser(user);

		model.addAttribute("message", "Password has been updated.");
		model.addAttribute("title", "Change Password");
		return "user-changePassword";
	}

	@RequestMapping("validateUser.json")
	public @ResponseBody ValidateResponse processForm(@Valid User object,
			BindingResult result) {
		return super.processForm(object, result);
	}

	@RequestMapping("user/home")
	public String getlogin(HttpServletRequest request, HttpSession session,
			Authentication auth, Model model) {
		logger.debug("calling user page...");

		User user = null;
		if (request.getParameter("login") != null) {
			user = userService.findUserByName(auth.getName());
			session.setAttribute("user", user);
		}
		model.addAttribute("title", "User Home");
		return "user-home";
	}
}
