<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
	<!-- Declare a view resolver -->
	<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
    		p:prefix="/WEB-INF/views/" p:suffix=".jsp" p:order="1" /> -->
    
     <!-- freemarker config -->
	<!-- <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	  <property name="templateLoaderPath" value="/WEB-INF/ftl/"/>
	</bean> -->

	<!--
	
	  View resolvers can also be configured with ResourceBundles or XML files. If you need
	  different view resolving based on Locale, you have to use the resource bundle resolver.
	
	-->
	<!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
	  <property name="cache" value="true"/>
	  <property name="prefix" value=""/>
	  <property name="suffix" value=".ftl"/>
	</bean> -->
     
    <!--
      View resolvers can also be configured with ResourceBundles or XML files. If you need
      different view resolving based on Locale, you have to use the resource bundle resolver.
    -->
    <!-- <bean id="FreeMarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
      <property name="cache" value="false"/>
      <property name="suffix" value=".ftl"/>
      <property name="requestContextAttribute" value="rc"/>
      <property name="contentType" value="text/html; charset=utf-8"></property>
      <property name="exposeSpringMacroHelpers" value="true"/>
      <property name="order" value="2"></property>
    </bean> -->
    
    		
    <!-- <bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="52428800" />
		<property name="maxInMemorySize">
			<value>10000</value>
		</property>
	</bean>		 -->
	
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
				<entry key="html" value="text/html" />
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />

				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg>
						<bean class="org.springframework.oxm.xstream.XStreamMarshaller" >
						<!-- <property name="autodetectAnnotations" value="true" /> -->
							<property name="aliases">
								<map>
									<entry key="list" value="java.util.List" />
									<entry key="string" value="java.lang.String" />
									<entry key="hsahmap" value="java.util.HashMap" />
									<entry key="object" value="java.lang.Object" />
									<entry key="hashSet" value="java.util.HashSet" />
								</map>
							</property>
							<property name="supportedClasses">
								<list>
									<value>java.util.List</value>
									<value>java.lang.String</value>
									<value>java.util.Map</value>
									<value>java.lang.Object</value>
									<value>java.util.Set</value>
									<value>java.lang.Long</value>
									<value>java.util.Date</value>
								</list>
							</property>
				    </bean>
				    </constructor-arg>
				 </bean>
			</list>
		</property>
	</bean>		
    		
   <!--  <mvc:resources mapping="/assets/**" location="/assets/" />		 --> 
</beans>