/*
 * this controller is used for handle 
 * a request for Public user 
 */

package com.netsol.controllers;


import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.dao.SaltSource;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.savedrequest.HttpSessionRequestCache;
import org.springframework.security.web.savedrequest.SavedRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.netsol.controllers.utility.CommonWebUtils;
import com.netsol.entities.User;
import com.netsol.entities.UserRole;
import com.netsol.service.UserRoleService;
import com.netsol.service.UserService;
import com.netsol.utility.CommonUtils;
import com.netsol.utility.EmailGenerator;
import com.netsol.utility.Sender;


//@Controller
public class PublicController extends BaseController<User>{

	@Autowired
	private UserService userService;
	@Autowired
	private UserRoleService userRoleService;
	
	@Autowired  Sender sender;
	
	@Autowired private PasswordEncoder passwordEncoder;
	@Autowired private SaltSource saltSource;

	static final Logger logger = Logger.getLogger(PublicController.class);
	
	@RequestMapping(value="/", method=RequestMethod.GET)
	public String index(HttpServletRequest request, Model model) {
		logger.debug("calling index page");
		model.addAttribute("title", "Welcome User");
		return "public-index";
	}
	
	@RequestMapping("/check")
	public String loginFail(HttpServletRequest request,HttpServletResponse response, Model model) {
		logger.debug("calling index page");
		
		SavedRequest savedRequest = new HttpSessionRequestCache().getRequest(request, response);
		String servletpath=savedRequest.getRedirectUrl();
		Pattern pattern = Pattern.compile("/admin");
		Matcher matcher = pattern.matcher(servletpath);
		if (matcher.find()) {
		    return "redirect:/adminlogin"; 
		} else {
			return "redirect:/";
		}
	}
	
	
	
	
	@RequestMapping("/adminlogin")
	public String adminLogin(HttpServletRequest request, Model model) {
		logger.debug("calling admin login page");
		
		model.addAttribute("title", "Welcome Admin");
		return "admin-login";
	}
	
	
	
	
	
	@RequestMapping("/403")
	public String get403(HttpServletRequest request, Model model) {
		logger.debug("calling 403 page...");
		
		model.addAttribute("message","You do not have permission to access this page!");
		model.addAttribute("title", "403");
		return "public-403";
	}
	

}
